<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Understanding Go - Luca Perić's Blog</title><description>Posts about anything software engineering, CS, deep learning, computer vision, crypto and startups.</description><link>http://blog.lucaperic.com/</link><image><url>http://blog.lucaperic.com/favicon.png</url><title>Understanding Go - Luca Perić's Blog</title><link>http://blog.lucaperic.com/</link></image><generator>Ghost 2.20</generator><lastBuildDate>Thu, 08 Aug 2019 16:18:42 GMT</lastBuildDate><atom:link href="http://blog.lucaperic.com/tag/understanding-go/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Understanding Go: An exploratory blog series</title><description>A blog series dedicated to evaluating and sharing bits of knowledge gained through the process of learning a new language with previous experience in mostly Python and Java.</description><link>http://blog.lucaperic.com/understanding-go-intro/</link><guid isPermaLink="false">5d4c48ff05a4a420ee19e168</guid><category>Understanding Go</category><category>Technical</category><dc:creator>Luca Peric</dc:creator><pubDate>Thu, 08 Aug 2019 16:10:49 GMT</pubDate><media:content url="http://blog.lucaperic.com/content/images/2019/08/03cbc1a9f9178055093eb0c25ba9df2c29611671.jpg" medium="image"/><content:encoded>&lt;img src="http://blog.lucaperic.com/content/images/2019/08/03cbc1a9f9178055093eb0c25ba9df2c29611671.jpg" alt="Understanding Go: An exploratory blog series"&gt;&lt;p&gt;After spending the majority of my time working within the dynamically typed and interpreted languages, I've found myself (&lt;a href="https://blog.lucaperic.com/author/luca/"&gt;who?&lt;/a&gt;) wanting to explore more performant languages that are more viable within the modern tech stack for scalable architectures. I'll be exploring the language (standard library initially) from the bottom up in order to gain the best possible understanding of Go's different characteristics and best practices (both are not necessarily concepts exclusive to Go) followed by trying to detail the fresh learning path for easiest possible consumption (across time and explanation complexity).&lt;/p&gt;</content:encoded></item></channel></rss></html>